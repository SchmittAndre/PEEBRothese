Title = "$light_lime()$scale(2)$offset_movement(1,0) # Escape Room #"
Description = "$light_blue()Find the code, leading you to your escape.                 $rgb(0.55,0.35,0.1)- aka Simon's $shaking_on()CRAZY$shaking_off() Adventure"

StartRoom = lobby

OnInit:
  Action =
  \/CODE
    write "Welcome!"
    write "You are trapped and have to find a way out of here."
    write "Taking a look around would probably be a good idea."
  /\END
end

Rooms:
  lobby:
    Aliases:
      "start room"
      "lobby"
      "entrance hall"
    end
    Description = "The room, in which you wake up."
    Locations:
      exit_door
    end
  end
  kitchen:
    Aliases:
      "kitchen"
      "cuisine"
    end
    Description = "The kitchen is neither really clean nor dirty."
    Locations:
      cookie_jar
      birchwood_drawer
      oakwood_drawer
      sprucewood_drawer
    end
  end
  garden:
    Aliases:
      "large garden"
      "garden"
    end
    Description = "A fairly large garden, which is enclosed by unclimbable walls though."
    Locations:
      well
      tree
      food_bowl
    end
    CustomCommands:
      cut_tree:
        Aliases:
          "cut down <tree> with <item>"
          "cut down <tree> using <item>"
          "cut <tree> down using <item>"
          "cut <tree> down with <item>"
          "cut <tree> with <item>"
          "cut <tree> using <item>"
        end
        Action =
        \/CODE
          if <tree> is :tree then
            run_with :tree "cut it with "<item>
          else
            skip
          end
        /\END
      end
    end
  end
  garage:
    Aliases:
      "garage"
    end
    Description = "It is pretty dark inside of the garage, but not dark enough for you to need a flashlight."
    Locations:
      car
      workbench
    end
  end
  corridor:
    Aliases:
      "narrow corridor"
      "corridor"
      "hall"
      "hallway"
    end
    Description = "A narrow and not too long corridor with a hatch in the ceiling."
    CustomCommands:
      climb_ladder:
        Aliases:
          "climb up <item>"
          "climb <item>"
        end
        Action =
        \/CODE
          if <item> is :ladder then
            if :ladder below :attic_hatch then
              write "You climb up the ladder, reaching into the attic."
              set_room :attic
            else
              write "There is no ladder to climb on, place one down first."
            end
          else
            skip
          end
        /\END
      end
    end
  end
  attic:
    Aliases:
      "attic"
      "loft"
    end
    Description = "It sure is dusty up here in this attic..."
    Locations:
      jigsaw_doll
      shelf
    end
     CustomCommands:
      climb_ladder:
        Aliases:
          "climb down <item>"
          "climb <item>"
        end
        Action =
        \/CODE
          if <item> is :ladder then
            if :ladder below :attic_hatch then
              write "You climb the ladder back down to the corridor."
              set_room :corridor
            else
              write "There is no ladder you could climb down on."
            end
          else
            skip
          end
        /\END
      end
    end
  end
  library:
    Aliases:
      "library"
      "book room"
      "room full of knowledge"
    end
    Description = "Some shelves are standing around, but they are awfully empty for this to be called \"library\"."
    Locations:
      shelves
      table
    end
  end
end

Items:
  // Code Fragments
  codefragment1:
    Aliases:
      "codefragment nr 1"
      "codefragment 1"
    end
    Description = "A small piece of paper. There is something written on it."
    CustomCommands:
      read:
        Aliases:
          "read <item>"
        end
        Action =
        \/CODE
          if <item> is :codefragment1 then
            write "Following number is written on the paper:"
            write "$delay(0)$coffset(0.5,0) ____________________"
            write "$delay(0)$coffset(0.5,0)/                   /"
            write "$delay(0)| $light_gray()2$white() |"
            write "$delay(0)|                   |"
            write "$delay(0)|_/\\___--__/^'--'\\__|"
            write ""
          else
            skip
          end
        /\END
      end
    end
  end
  codefragment2:
    Aliases:
      "codefragment nr 2"
      "codefragment 2"
    end
    Description = "A small piece of paper. There is something written on it."
    CustomCommands:
      read:
        Aliases:
          "read <item>"
        end
        Action =
        \/CODE
          if <item> is :codefragment2 then
            write "Following number is written on the paper:"
            write "$delay(0)$coffset(0.5,0) ____________________"
            write "$delay(0)$coffset(0.5,0)/                   /"
            write "$delay(0)| $light_gray()0$white() |"
            write "$delay(0)|                   |"
            write "$delay(0)|_/\\___--__/^'--'\\__|"
            write ""
          else
            skip
          end
        /\END
      end
    end
  end
  codefragment3:
    Aliases:
      "codefragment nr 3"
      "codefragment 3"
    end
    Description = "A small piece of paper. There is something written on it."
    CustomCommands:
      read:
        Aliases:
          "read <item>"
        end
        Action =
        \/CODE
          if <item> is :codefragment3 then
            write "Following number is written on the paper:"
            write "$delay(0)$coffset(0.5,0) ____________________"
            write "$delay(0)$coffset(0.5,0)/                   /"
            write "$delay(0)| $light_gray()1$white() |"
            write "$delay(0)|                   |"
            write "$delay(0)|_/\\___--__/^'--'\\__|"
            write ""
          else
            skip
          end
        /\END
      end
    end
  end
  codefragment4:
    Aliases:
      "codefragment nr 4"
      "codefragment 4"
    end
    Description = "A small piece of paper. There is something written on it."
    CustomCommands:
      read:
        Aliases:
          "read <item>"
        end
        Action =
        \/CODE
          if <item> is :codefragment4 then
            write "Following number is written on the paper:"
            write "$delay(0)$coffset(0.5,0) ____________________"
            write "$delay(0)$coffset(0.5,0)/                   /"
            write "$delay(0)| $light_gray()7$white() |"
            write "$delay(0)|                   |"
            write "$delay(0)|_/\\___--__/^'--'\\__|"
            write ""
          else
            skip
          end
        /\END
      end
    end
  end

  // Keys
  drawer_key:
    Aliases:
      "drawer key"
      "bronze key"
    end
    Description = "A small, bronze casted key."
  end
  library_key:
    Aliases:
      "silver key"
      "library key"
    end
    Description = "A shiny key, made entirely out of silver."
  end

  ladder:
    Aliases:
      "sturdy ladder"
      "ladder"
    end
    Description = "You actually managed to build a ladder just from some sticks and a few pieces of rope? You must be a genius."
  end
  ropes:
    PluralAliases:
      "ropes"
      "bunch of ropes"
    end
    Description = "A bunch of ropes. They seem to be strong enough to tie something together."
  end
  sticks:
    PluralAliases:
      "sticks"
      "some stick"
      "sturdy sticks"
      "some sturdy sticks"
    end
    Description = "Some sticks, they seem pretty sturdy."
  end
  saw:
    Aliases:
      "framed pruning saw"
      "saw"
      "tree saw"
    end
    Description = "Even though it looks old, it is still very sharp."
  end
  bubble_gum:
    Aliases:
      "bubble gum"
      "chewing gum"
      "gum"
    end
    Description = "An old and awfully sticky bubble gum."
  end
  stick_with_gum:
    Aliases:
      "gum on a stick"
      "bubble gum on a stick"
      "chewing gum on a stick"
    end
    Description = "A fairly long stick with a sticky bubble gum attached to it at the end."
  end

  // Other
  cat_food:
    Aliases:
      "tin can"
      "can of cat food"
      "cat food"
      "knitekat"
    end
    Description = "Looks like cat food. On the tin can is written \"$gray()knit$red()e$gray()kat$reset()\", that name seems oddly familiar..."
    CustomCommands:
      fill_food_bowl:
        Aliases:
          "fill <item> in <location>"
        end
        Action =
        \/CODE
          if <item> is :knitekat then
            if <location> is :food_bowl then
              write "You filled the food_bowl."
              write "Seconds later, a black cat appeared out of nowhere."
              if :cookie eaten then
                write "$light_lime()Yo hooman! Wazzup?"
                write "$light_lime()I came from other side of wall!"
                write "$light_lime()Grateful for food, you put in bowl!"
              end
              write "The cat eats up the whole content of bowl you just filled up."
              if :cookie eaten then
                write "$light_lime()Take dis with you hooman!"
                write "$light_lime()Surely better use for this you have!"
              end
              write "After done eating, it ran away, leaving a small piece of paper behind in the empty bowl."
              location_add_item :codefragment5 in :food_bowl
            else
              write "Please don't dump your cat food in random places."
            end
          else
            skip
          end
        /\END
      end
    end
  end
  cookie:
    Aliases:
      "cookie"
    end
    Description = "An awfully tasty looking cookie..."
    CustomCommands:
      eat_cookie:
        Aliases:
          "eat <item>"
          "eat up <item>"
          "bite into <item>"
          "take a bite of <item>"
        end
        Action =
        \/CODE
          if <item> is :cookie then
            player_del_item :cookie
            set :cookie eaten
            write "$shaking_on()$delay(0)$lime(0.9)*chomp*$sleep(0.5) $lime(0.7)*chomp*$sleep(0.6) $lime(0.5)*chomp*$sleep(1)"
            write "$shaking(0.1)$cyan(0.7)That was most certainly not a normal cookie..."
          else
            skip
          end
        /\END
      end
    end
  end
end

Locations:
  exit_door:
    Aliases:
      "steel door"
      "exit door"
      "finish door"
    end
    Description = "This door is locked and has a num-pad next to it."
    CustomCommands:
      open:
        Aliases:
          "open door"
          "open"
        end
        Action =
        \/CODE
          if :exit_door unlocked then
            if :exit_door open then
              write :exit_door" is open already."
            else
              set_description :exit_door" is open now."
              set :exit_door open
              write "Awesome!! You opend the door to destiny. It slowy drawing you inside."
              write "$delay(1)..."
              write "$shaking(0.2)$red() YOU'RE DEAD!!!!$white"
            end
          else
            write"the door won't open. It's locked"
          end
        /\END
      end
      enter_code:
        Aliases:
          "enter the code 2017"
          "type 2017"
          "type in 2017"
          "insert 2017"
          "input 2017"
        end
        Action =
        \/CODE
            write "A faint *click* sounds from the door. It seems to be unlocked now."
            set_description :exit_door "The door is probably unlocked now."
            set :exit_door unlocked
        /\END
      end
      enter_wrong_code:
        Aliases:
          "enter the code <code>"
          "type <code>"
          "type in <code>"
          "insert <code>"
          "input <code>"
        end
        Action =
        \/CODE
          write "You hear a loud beeping noise coming out of the numpad."
          write "Furthermore it starts blinking red. The code seems to be wrong."
        /\END
      end
    end
  end
  cookie_jar:
    Aliases:
      "cookie jar"
      "jar"
    end
    Description = "A jar with cookies"
    Items:
      in:
        List:
          "inside of"
          "inside"
          "in"
        end
        Take:
          "out of"
          "from"
        end
        Items:
          cookie
        end
      end
    end
  end
  birchwood_drawer:
    Aliases:
      "birch wood drawer"
      "birch drawer"
    end
    Description = "There is a bronze keyhole in this birch wood drawer."
    CustomCommands:
      use_key:
        Aliases:
          "use <item>"
          "open it with <item>"
        end
        Action =
        \/CODE
          if <item> is :drawer_key then
            set :birchwood_drawer unlocked
            set_description :birchwood_drawer "The previously locked drawer is now unlocked."
            filter_disable in :birchwood_drawer
            location_add_item :codefragment1 in :birchwood_drawer
          elseif <item> is :library_key then
            write "Nope, the key does not fit into the keyhole."
          else
            skip
          end
        /\END
      end
    end
    Items:
      in:
        List:
          "inside of"
          "inside"
          "in"
        end
        Take:
          "out of"
        end
        Whitelist:
        end
      end
    end
  end
  oakwood_drawer:
    Aliases:
      "oak wood drawer"
      "oak drawer"
    end
    Description = "That's just a normal drawer. Absolutly nothing special about this one."
  end
  sprucewood_drawer:
    Aliases:
      "spruce wood drawer"
      "spruce drawer"
    end
    Description = "A dark drawer made out of spruce wood. The lower drawer is pulled out already."
    Items:
      in:
        List:
          "inside of"
          "inside"
          "in"
        end
        Take:
          "out of"
        end
        Items:
          ropes
        end
      end
    end
  end
  well:
    Aliases:
      "well"
    end
    Description = "It didn't have much of an appearance, until you actually took a look down. Damn this thing is deep!"
  end
  tree:
    Aliases:
      "small tree"
      "tiny tree"
      "tree"
    end
    Description = "A small tree, not even reaching the wall, surrounding the garden."
    CustomCommands:
      saw_tree:
        Aliases:
          "cut it with <item>"
          "cut it using <item>"
          "cut it down with <item>"
          "cut it down using <item>"
        end
        Action =
        \/CODE
          if :tree cut_down then
            write "No need, to obliterate the poor tree even more, than it already is..."
          else
            if <item> is :saw then
              set_location :tree
              inform :tree
              location_add_item :sticks below :tree
              set :tree cut_down
              set_description :tree "Only a stump now to be honest."
              write "You cut the tree into multiple pieces, leaving only a stump behind."
              write "Poor little tree... He had so much to live for, you monster!"
            else
              write "I don't think you can cut that tree down with that."
            end
          end
        /\END
      end
    end
    Items:
      below:
        List:
          "below"
          "around"
          "besides"
        end
        Take:
          "from below of"
          "from below"
          "from besides"
        end
      end
    end
  end
  food_bowl:
    Aliases:
      "food bowl"
      "bowl"
    end
    Description = "A cute food bowl, with a small image of a fish on it."
  end
  car:
    Aliases:
      "silver BMW 530d"
      "BMW"
      "530d"
      "silver car"
      "car"
    end
    Description = "You would sure like to take a little joyride with this BMW, huh? Too bad you don't have the keys for it."
  end
  workbench:
    Aliases:
      "workbench"
    end
    Description = "A shabby looking workbench with only a single tool hanging of it."
    Items:
      on:
        List:
          "on"
        end
        Take:
          "off of"
          "off"
          "from"
        end
        Items:
          saw
        end
      end
    end
  end
  jigsaw_doll:
    Aliases:
      "jigsaw puppet"
      "jigsaw doll"
      "doll"
      "puppet"
    end
    Description = "A scary looking doll. Its dead eyes are following your every step."
    Items:
      in:
        List:
          "inside of"
          "inside"
          "in"
        end
        Take:
          "out of"
        end
        Items:
          codefragment2
        end
      end
    end
  end
  shelf:
    Aliases:
      "shelf"
    end
    Description = "A dusty shelf"
    Items:
      on:
        List:
          "on top of"
          "on"
        end
        Take:
          "from"
          "off"
        end
        Items:
          cat_food
        end
      end
    end
  end
  shelves:
    Aliases:
      "library shelves"
      "shelves"
    end
    Description = "Some dusty shelves with books"
  end
  table:
    Aliases:
      "libray tabele"
    end
    Description = "A table with lots of books on it."
  end
end

RoomConnections:
  corridor_door:
    Aliases:
      "corridor door"
    end
    Description = "Just a normal door, connecting the kitchen to a corridor."
    Room1 = corridor
    Room2 = kitchen
    OnUse:
      Action =
      \/CODE
        if not :bubble_gum stepped_in then
          write "A sloppy *squish* sounds fom your shoe."
          write "You stepped right into a bubble gum."
          write "You take it off your shoe and put it into your inventory."
          player_add_item :bubble_gum
          inform :bubble_gum
          set :bubble_gum stepped_in
        end
      /\END
    end
  end
  kitchen_door:
    Aliases:
      "kitchen door"
    end
    Description = "It squeaks"
    Room1 = kitchen
    Room2 = lobby
  end
  garage_door:
    Aliases:
      "garage door"
      "door to heaven"
    end
    Description = "There is heaven behind that door"
    Room1 = lobby
    Room2 = garage

  end
  attic_hatch:
    Aliases:
      "hatch"
      "trapdoor"
    end
    Locked = true
    Description = "This hatch is way out of reach without a ladder."
    Room1 = corridor
    Room2 = attic
    Items:
      below:
        List:
          "below of"
          "below"
          "at"
          "by"
        end
        Take:
          "from"
        end
      end
    end
  end
  garden_gate:
    Aliases:
      "garden gate"
    end
    Description = "This gate leads to the outside."
    Room1 = corridor
    Room2 = garden
  end
end

ItemCombinations:
  craft_ladder:
    Input1 = sticks
    Input2 = ropes
    Output = ladder
    OnCombine:
      Action =
      \/CODE
        set :ladder crafted
        if not :stick_with_gum crafted then
          write "You still have a single leftover stick after crafting the ladder."
          set_description :sticks "Only a single stick is left, after crafting the ladder."
          player_add_item :sticks
        end
      /\END
    end
  end
  gum_on_stick:
    Input1 = sticks
    Input2 = bubble_gum
    Output = stick_with_gum
    OnCombine:
      Override = true
      Action =
      \/CODE
        set :stick_with_gum crafted

        player_add_item :stick_with_gum
        player_del_item :bubble_gum
        write "You now have a glorious gum on a stick."

        if :ladder crafted then
          player_del_item :sticks
        else
          write "You have used up only a single stick and have therefore still a lot left to use for other purposes."
        end
      /\END
    end
  end
end