Title = "EscapeRoom"
Description = "Simons crazy Adventure"

StartRoom = lobby

OnInit:
  Action = 
  \/CODE
    write "SOMETHING GONE WRONG!"
    write "WHERE AM I?"
    write "I really ought to look around."
  /\END
end

Rooms:
  lobby:
    Aliases:
      "startroom"
      "lobby"
      "entrance hall"
    end
    Description = "The room you wake up."
    Locations:
      exit_door
    end
  end
  kitchen:
    Aliases:
      "kitchen"
      "cuisine"
    end
    Description = "TODO"
    Locations:
      cookie_jar
      lavawood_drawer
      oak_drawer
      spruce_drawer
    end
  end
  garden:
    Aliases:
      "large garden"
      "garden"
    end
    Description = "A nice garden with a tree and a well."
    Locations:
      well
      tree
      food_bowl
    end
  end
  garage:
    Aliases:
      "garage"
    end
    Description = "Something with a car."
    Locations:
      car
      workbench
    end
  end
  corridor:
    Aliases:
      "small corridor"
      "corridor"
      "hall"
      "hallway"
    end
    Description = "A small corridor."
  end
  attic:
    Aliases:
      "attic"
      "loft"
    end
    Description = "It's dusty up here"
    Locations:
      jigsaw_puppet
      shelf
    end
  end
  library:
    Aliases:
      "library"
      "book room"
      "room full of knowledge"
    end
    Description = "There are not a lot books in the shelves."
    Locations:
      shelves
      table
    end
  end
end

Items:
  // Code Fragments
  codefragment1:
    Aliases:
      "codefragment nr 1"
      "codefragment 1"
    end
    Description = "A small piece of paper. There is something written on it."
    CustomCommands:
      read_codefragment:
        Aliases:
          "read <item>"
        end
        Action =
        \/CODE
          if <item> is :codefragment1 then
            write "Following number is written on the paper:"
            write "$delay(0)$coffset(0.5,0) ____________________"
            write "$delay(0)$coffset(0.5,0)/                   /"
            write "$delay(0)| $light_gray()9$white() |"
            write "$delay(0)|                   |"
            write "$delay(0)|_/\\___--__/^'--'\\__|"
            write ""
          else
            skip
          end
        /\END
      end
    end
  end
  codefragment2:
    Aliases:
      "codefragment nr 2"
      "codefragment 2"
    end
    Description = "A small piece of paper. There is something written on it."
    CustomCommands:
      read_codefragment:
        Aliases:
          "read <item>"
        end
        Action =
        \/CODE
          if <item> is :codefragment2 then
            write "Following number is written on the paper:"
            write "$delay(0)$coffset(0.5,0) ____________________"
            write "$delay(0)$coffset(0.5,0)/                   /"
            write "$delay(0)| $light_gray()2$white() |"
            write "$delay(0)|                   |"
            write "$delay(0)|_/\\___--__/^'--'\\__|"
            write ""
          else
            skip
          end
        /\END
      end
    end
  end
  codefragment3:
    Aliases:
      "codefragment nr 3"
      "codefragment 3"
    end
    Description = "A small piece of paper. There is something written on it."
    CustomCommands:
      read_codefragment:
        Aliases:
          "read <item>"
        end
        Action =
        \/CODE
          if <item> is :codefragment3 then
            write "Following number is written on the paper:"
            write "$delay(0)$coffset(0.5,0) ____________________"
            write "$delay(0)$coffset(0.5,0)/                   /"
            write "$delay(0)| $light_gray()7$white() |"
            write "$delay(0)|                   |"
            write "$delay(0)|_/\\___--__/^'--'\\__|"
            write ""
          else
            skip
          end
        /\END
      end
    end
  end
  codefragment4:
    Aliases:
      "codefragment nr 4"
      "codefragment 4"
    end
    Description = "A small piece of paper. There is something written on it."
    CustomCommands:
      read_codefragment:
        Aliases:
          "read <item>"
        end
        Action =
        \/CODE
          if <item> is :codefragment4 then
            write "Following number is written on the paper:"
            write "$delay(0)$coffset(0.5,0) ____________________"
            write "$delay(0)$coffset(0.5,0)/                   /"
            write "$delay(0)| $light_gray()0$white() |"
            write "$delay(0)|                   |"
            write "$delay(0)|_/\\___--__/^'--'\\__|"
            write ""
          else
            skip
          end
        /\END
      end
    end
  end
  codefragment5:
    Aliases:
      "codefragment nr 5"
      "codefragment 5"
    end
    Description = "A small piece of paper. There is something written on it."
    CustomCommands:
      read_codefragment:
        Aliases:
          "read <item>"
        end
        Action =
        \/CODE
          if <item> is :codefragment5 then
            write "Following number is written on the paper:"
            write "$delay(0)$coffset(0.5,0) ____________________"
            write "$delay(0)$coffset(0.5,0)/                   /"
            write "$delay(0)| $light_gray()1$white() |"
            write "$delay(0)|                   |"
            write "$delay(0)|_/\\___--__/^'--'\\__|"
            write ""
          else
            skip
          end
        /\END
      end
    end
  end
  
  // Keys
  drawer_key:
    Aliases:
      "drawer key"
      "bronze key"
    end
    Description = "A small bronze key"
  end
  library_key:
    Aliases:
      "silver key"
    end
    Description = "A medium sized silver key."
  end
  
  ladder: 
    Aliases: 
      "sturdy ladder"
      "ladder"
    end
    Description = "You actually managed to build a ladder just from some sticks and a few pieces of rope? You must be geniously a genius."
  end
  ropes:
    Aliases:
      "ropes"
    end
    Description = "A bunch of sturdy ropes. They seem to be strong enough to tie something together."
  end
  sticks:
    PluralAliases:
      "sticks"
      "some stick"
      "sturdy sticks"
      "some sturdy sticks"
    end
    Description = "Some sticks, they seem pretty sturdy."
  end
  saw:
    Aliases:
      "framed pruning saw"
      "saw"
      "tree saw"
    end
    Description = "A sharp framed pruning saw."
    OnTake:
      Action =
      \/CODE
        write "$red()*ouch*"
        write "It seems, you forgot, on which side you should hold a saw..."
        write "Tip: You picked the wrong one."
      /\END
    end
  end
  bubble_gum:
    Aliases:
      "bubble gum"
      "chewing gum"
      "gum"
    end
    Description = "An old bubble gum."
  end
  stick_with_gum:
    Aliases:
      "gum on a stick"
      "bubble gum on a stick"
      "chewing gum on a stick"
    end
    Description = "A fairly long stick with a bubble gum attached to it at the end."
    CustomCommands:
      get_drawer_key:
        Aliases:
          "get <item> with <item2> in <location>"
          "get <item> with <item2> out of <location>"
          "hook <item> with <item2> out of <location>"
          "hook <item> with <item2> in <location>"
          "pocke <item> with <item2>"
        end
        Action = 
        \/CODE
          if <location> is :well then
            if <item2> is :stick_with_gum then
              if <item> is :drawer_key then
                write "$sleep(2) it works!"
                write "you get the key!"
                write "you droped the stick acidently"
                player_add_item :drawer_key
                player_del_item :stick_with_gum
              else
                write "that worked!$sleep(2)..."
                write "$sleep(2) wait that makes no sense!"
              end
            else
              write "that makes no sense!"
            end
          else
            write "that makes no sense!" 
          end
        /\END
      end
    end
  end
  
  // Other 
  knitekat:
    Aliases:
      "knitekat"
      "cat food"
      "tin can"
    end
    Description = "Looks like cat food. On the tin can is written \"$gray()knit$red()e$gray()kat$reset()\", that name seems oddly familiar..."
  end
  cookie:
    Aliases:
      "cookie"
    end
    Description = "An awfully tasty looking cookie..."
    CustomCommands:
      eat_cookie:
        Aliases:
          "eat <item>"
        end
        Action =
        \/CODE
          player_del_item :cookie
          set :cookie eaten
          write "$shaking_on()$delay(0)$lime(0.9)*chomp*$sleep(0.5) $lime(0.7)*chomp*$sleep(0.6) $lime(0.5)*chomp*$sleep(1)"
          write "$shaking(0.1)$cyan(0.7)That was most certainly not a normal cookie..."
        /\END
      end
    end
  end
end

Locations:
  exit_door:
    Aliases:
      "steel door"
      "exit door"
      "finish door"
    end
    Description = "The door of your desire. Escape throgh this door! There is a num-pad next to the door."
    CustomCommands:
      open:
        Aliases:
          "open door"
          "open"
        end
        Action = 
        \/CODE
          if :exit_door unlocked then
            if :exit_door open then
              write :exit_door" is open already."
            else
              set_description :exit_door" is open now."
              set :exit_door open
              write "Awesome!! You opend the door to destiny. It slowy drawing you inside."
              write "$delay(1)..."
              write "$shaking(0.2)$red() YOU'RE DEAD!!!!$white"
            end
          else
            write"the door won't open. It's locked"
          end
        /\END
      end  
      typecode:
        Aliases:
          "enter the code 2017"
          "type 2017"
          "type in 2017"
          "insert 2017"
          "input 2017"
        end
        Action =
        \/CODE
            write "A faint click sounds from the door. It seems to be unlocked now."
            set_description :exit_door "The door is probably unlocked now."
            set :exit_door unlocked
        /\END 
      end
      typewrongcode:
        Aliases:
          "type in <code>"
          "enter the code <code>"
          "type <code>"
          "insert <code>"
          "input <code>"
        end
        Action = 
        \/CODE
            write "You hear \"beep, beep I'm a sheep\" out of the numpad."
            write "It also starts blinking red. The code seems to be wrong."
        /\END  
      end
    end
  end
  cookie_jar:
    Aliases:
      "cookie jar"
      "jar"
    end
    Description = "A jar with cookies"
    Items:
      in:
        List:
          "inside of"
          "inside"
          "in"
        end
        Take:
          "out of"
        end
        Items:
          cookie
        end
      end
    end
  end
  lavawood_drawer:
    Aliases:
      "lavawood drawer"
      "first drawer"
    end
    Description = "It looks hot, but there is a bronze keyhole."
    CustomCommands:
      use_key:
        Aliases:
          "use <item>"
          "open it with <item>"
        end
        Action =
        \/CODE
          if <item> is :drawer_key then
            set :lavawood_drawer unlocked
            set_description :lavawood_drawer "The upper drawer is unlocked now."
            filter_disable in :lavawood_drawer
            location_add_item :codefragment1 in :lavawood_drawer
          elseif <item> is :library_key then          
            write "Nope, that key does not fit."
          else
            skip
          end
        /\END
      end
    end
    Items:
      in:
        List:
          "inside of"
          "inside"
          "in"
        end
        Take:
          "out of"
        end
        Whitelist:
        end
      end
    end
  end
  oak_drawer:
    Aliases:
      "oak drawer"
      "second drawer"
    end
    Description = "A normal drawer nothing special."
    CustomCommands:
      open_oak:
        Aliases:
          "open <location>"
        end
        Action= 
        \/CODE
          if <location> is :oak_drawer then
            write "You've opend the oak drawer"
            filter_disable in :oak_drawer
            location_add_item :ropes in :oak_drawer
          else
            skip
          end
        /\END
      end
    end
  end
  spruce_drawer:
    Aliases:
      "spruce drawer"
      "third drawer"
    end
    Description = "A dark drawer, made out of spruce. The lower drawer is open."
    Items:
      in:
        List:
          "inside of"
          "in"
          "inside"
        end
        Take:
          "out of"
        end
        Items:
          ropes
        end
      end
    end
  end
  well:
    Aliases:
      "well"
    end
    Description = "A small well, but its damn deep."
    Items:
      in:
        List: 
          "in"
          "deep in the well"
        end
        Take:
          "from"
          "out of"
        end
        Whitelist:
          drawer_key
        end
      end
    end
  end
  tree:
    Aliases:
      "tree"
      "small tree"
      "tiny tree"
    end
    Description = "a small tree. It's not even reach the wall."
    CustomCommands:
      saw_tree:
        Aliases:
          "cut it"
          "cut down"
          "cut it down"
        end
        Action =
        \/CODE
          if :tree cut_down then
            write "Let the poor tree alive"
          else
            location_add_item :sticks below :tree 
            set :tree cut_down
            set_description :tree "A poor looking tree."
          end
        /\END
      end
    end
    Items:
      below:
        List:
          "below"
          "around"
        end
        Take:
          "from below"
          "from below of"
        end
      end
    end
  end
  food_bowl:
    Aliases:
      "food bowl"
    end
    Description = "an empty food bowl"
  end
  car:
    Aliases:
      "silver bmw 530d"
      "bmw"
      "530d"
      "silver car"
      "car"
    end
    Description = "A nice car. On the face of it its an BMW 530."
  end
  workbench:
    Aliases:
      "workbench"
    end
    Description = "A scabby looking workbench with many tools"
    Items:
      beside:
        List:
          "beside of"
          "beside"
          "on"
        end
        Take:
          "of"
        end
        Items:
          saw
        end
      end
    end
  end
  jigsaw_puppet:
    Aliases:
      "Jigsaw_puppet"
      "Jigsaw"
      "puppet"
    end
    Description = "A scarry looking puppet. It's looking at you were ever you go."
  end
  shelf:
    Aliases:
      "shelf"
    end
    Description = "A dusty shelf"
  end
  shelves:
    Aliases:
      "library shelves"
      "shelves"
    end
    Description = "Some dusty shelves with books"
  end
  table:
    Aliases:
      "libray tabele"
    end
    Description = "A table with lots of books on it."
  end      
end

RoomConnections:
  corridor_door:
    Aliases:
        "corridor door"
    end
    Description = ""
    Room1 = corridor
    Room2 = kitchen
    OnUse:
      Action = 
      \/CODE
        if not :bubble_gum stepped_in then
          write "A sloppy *squish* sounds fom your shoe."
          write "You stepped right into a bubble gum."
          write "You take it off your shoe and put it into your inventory."
          player_add_item :bubble_gum
          set :bubble_gum stepped_in
        end
      /\END
    end
  end
  kitchen_door:
    Aliases:
      "kitchen door"
    end
    Description = "It squeaks"
    Room1 = kitchen
    Room2 = lobby
  end
  garage_door:
    Aliases:
      "garage door"
      "door to heaven"
    end
    Description = "There is heaven behind that door"
    Room1 = lobby
    Room2 = garage
    
  end
  
  garden_door:
    Aliases:
      "garden door"
    end
    Description = "The door between th garden and the kitchen"
    Room1 = garden
    Room2 = kitchen
  end
 end     
 
ItemCombinations:
  craft_ladder:
    Input1 = sticks
    Input2 = ropes
    Output = ladder
    OnCombine:
      Action =
      \/CODE
        set :ladder crafted
        if not :stick_with_gum crafted then
          write "You still have a single leftover stick after crafting the ladder."
          set_description :sticks "Only a single stick is left, after crafting the ladder."
          player_add_item :sticks
        end
      /\END
    end
  end
  gum_on_stick:
    Input1 = sticks
    Input2 = bubble_gum
    Output = stick_with_gum
    OnCombine:
      Override = true
      Action =
      \/CODE
        set :stick_with_gum crafted
        
        player_add_item :stick_with_gum
        player_del_item :bubble_gum
        write "You now have a glorious gum on a stick."
        
        if :ladder crafted then
          player_del_item :sticks
        else
          write "You have used up only a single stick and have therefore still a lot left to use for other purposes."
        end
      /\END
    end
  end
end